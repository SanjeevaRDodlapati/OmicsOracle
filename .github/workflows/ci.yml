name: OmicsOracle CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        # Install spaCy models
        python -m spacy download en_core_web_sm
    
    - name: Code formatting (Black)
      run: |
        black --check src/ tests/
    
    - name: Import sorting (isort)
      run: |
        isort --check-only src/ tests/
    
    - name: Type checking (mypy)
      run: |
        mypy src/omics_oracle/
    
    - name: Linting (flake8)
      run: |
        flake8 src/ tests/
    
    - name: Security scan (bandit)
      run: |
        bandit -r src/
    
    - name: Dependency vulnerability scan
      run: |
        safety check

  testing:
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        python -m spacy download en_core_web_sm
    
    - name: Unit tests
      run: |
        pytest tests/unit/ -v --cov=src/omics_oracle --cov-report=xml
    
    - name: Integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: [quality-checks, testing]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t omics-oracle:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm omics-oracle:latest --help
